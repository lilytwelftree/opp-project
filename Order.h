#ifndef ORDER_H
#define ORDER_H

#include <string>
#include <vector>

// Forward declaration to avoid circular dependency
class Cake;

class Order {
 private:
  std::string request_flavour_;
  std::string request_filling_;
  std::string request_frosting_;
  std::string request_sprinkles_;
  double base_cost_;

 public:
  // constructor
  Order();

  // generate random cake flavour for customer request
  std::string RandomFlavour();

  // generate random filling for customer request
  std::string RandomFilling();

  // generate random frosting for customer request
  std::string RandomFrosting();

  // generate random sprinkles for customer request
  std::string RandomSprinkles();

  // compile entire customer order using random generation
  void GenerateRandomOrder();

  // calculate revenue generated by each random request
  double CalculateTotalCost() const;

  // check if submitted cake matches customer requests
  bool CheckIsMatchCake(const Cake& submitted_cake, int& correct_items) const;

  // display the order to console
  void DisplayOrder() const;

  // getters for order details
  std::string GetRequestFlavour() const;
  std::string GetRequestFilling() const;
  std::string GetRequestFrosting() const;
  std::string GetRequestSprinkles() const;

  // destructor
  ~Order();
};

#endif  // ORDER_H