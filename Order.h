// Order.h
#ifndef ORDER_H
#define ORDER_H

#include <string>
#include <vector>

// Forward declaration to avoid circular dependency
class Cake;

class Order {
private:
    std::string requestFlavour;
    std::string requestFilling;
    std::string requestFrosting;
    std::string requestSprinkles;
    double baseCost;
    
public:
    // Constructor
    Order();
    
    // Generate random cake flavour for customer request
    std::string randomFlavour();
    
    // Generate random filling for customer request
    std::string randomFilling();
    
    // Generate random frosting for customer request
    std::string randomFrosting();
    
    // Generate random sprinkles for customer request
    std::string randomSprinkles();
    
    // Compile entire customer order using random generation
    void generateRandomOrder();
    
    // Calculate revenue generated by each random request
    double calculateTotalCost() const;
    
    // Check if submitted cake matches customer requests
    bool checkIsMatchCake(const Cake& submittedCake, int& correctItems) const;
    
    // Display the order to console
    void displayOrder() const;
    
    // Getters for order details
    std::string getRequestFlavour() const;
    std::string getRequestFilling() const;
    std::string getRequestFrosting() const;
    std::string getRequestSprinkles() const;
    
    // Destructor
    ~Order();
};

#endif